Tmax=18#
time=1:(Tmax*12)#
# quartz()#
# windowframe=c(4,1)#
#  #
# par(mfrow=windowframe)#
#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 23, 31), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return((data[1, -1]))#
}#
plot_repro <- function(repro_data, length_data, repro_filenames) {#
  #matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
         # ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
  return(as.numeric(repro_data[1, -1]) )#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate metrics#
lifetimeM <-  function(survdata, filenames) {#
  data2 <- survdata$x[-216]#
   maxage <- which(survdata$x < 0.06)#
 # plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  #axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return(data2)#
} #
realized_M <-  function(survdata, filenames) {#
  annual_index<- seq(12, 215, 12)/12#
  data1  <- log(survdata$x[annual_index])#
  reg1 <- lm(data1~annual_index)#
  plot(annual_index, data1, ylab = "Ln(proportion surviving)", xlab = "Age (years)")#
  abline(reg1)#
   return(coef(reg1)[[2]])#
} #
maxage<-  function(survdata, filenames) {#
  lifespan <- min(which(survdata$x < 0.06))#
  return(lifespan)#
#
}#
#point to the files you want to compare#
    setwd("~/Documents/size-spectra-life-history/Model_output/suppfig6/")#
 data_files <- list.files(pattern = "\\.csv$")#
#
# #
# ## read in files#
# #
repro_filenames <- data_files[((length(data_files)/4)+1):(2*(length(data_files)/4))]#
state_filenames <- data_files[(2*(length(data_files)/4)+1):(3*(length(data_files)/4))]#
length_filenames <- data_files[1:(length(data_files)/4)]#
surv_filenames <- data_files[(3*(length(data_files)/4)+1):(4*(length(data_files)/4))]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
quartz()#
windowframe=c(4,1)#
#
par(mfrow=windowframe)#
L<-mapply(plot_length, length_data, length_filenames)    #
R<-mapply(plot_repro, repro_data, length_data, repro_filenames)#
# RV<-mapply(lifetimeR, repro_data, surv_data, length_filenames)#
# RV <- rbind(RV, rep(0, 12))#
lifespan <- mapply(maxage, surv_data, length_filenames) #
lifespan[2]<-215#
#
M <- mapply(lifetimeM, surv_data, length_filenames)#
#
truncate_age <- function(kappamat, lifespan) { #where kappamat is L, R, or RV#
  for (i in 1:6) {#
  kappamat[lifespan[i]:(Tmax*12-1), i] <- NA#
  }#
  return(kappamat)#
}#
#
truncL <- truncate_age(L, lifespan)#
truncR <- truncate_age(R, lifespan)/4.2e+6 #
truncM <- truncate_age(M, lifespan) #
 kappa<-c(0.5, 2)#
 index <- 1:6#
 quartz()#
 pal = c("#FFCE30", "#FF9E79", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 1] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3, col=pal[i])#
 }#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
 #axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=1, xaxt="n", las=1, lwd=2, xlab="", ylab= "Survival")#
    legend("topright", bty="n", col=pal,  lty=1, lwd=3, cex=0.5, legend=c("H4_K0.5", "H4_K2",  "H8_K0.5", "H8_K2","H12_K0.5", "H12_K2"))
matplot(truncM[, 1:6], col=pal, type="l", lty=1, xaxt="n", las=1, lwd=2, xlab="", ylab= "Percent of cohort surviving")#
    legend("topright", bty="n", col=pal,  lty=c(1, 2, 1, 2, 1, 2), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
matplot(truncM[, 1:6], col=pal, type="l", lty=1, xaxt="n", las=1, lwd=2, xlab="", ylab= "Percent of cohort surviving")#
    legend("topright", bty="n", col=pal,  lty=c(1, 2, 1, 2, 1, 2), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
matplot(truncM[, 1:6], col=pal, type="l", lty=c(1, 3, 1, 3, 1, 3), xaxt="n", las=1, lwd=2, xlab="", ylab= "Percent of cohort surviving")#
    legend("topright", bty="n", col=pal,  lty=c(1, 3, 1, 3, 1, 3), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", las=1, lwd=2, xlab="", ylab= "Percent of cohort surviving")#
    legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", las=1, lwd=4, xlab="", ylab= "Percent of cohort surviving")#
    legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 1] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3, col=pal[i])#
 }
matplot(truncL)
pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3, col=pal[i])#
 }
quartz()#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
 #axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", las=1, lwd=4, xlab="", ylab= "Percent of cohort surviving")
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, xlab="", ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n",  las=1, lwd=4, xlab="", ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), xlab = "Age (years)",labels = (seq(1, 18, by=1)))
matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 5, width = 5.5, unis = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
quartz()#
 dev.new(height = 5, width = 5.5, unis = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
quartz()#
 dev.new(height = 5, width = 5.5, units = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
linetypes <-c( 3, 1, 3, 1, 3, 1), #
 quartz()#
 dev.new(height = 5, width = 5.5, units = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
linetypes <-c( 3, 1, 3, 1, 3, 1)#
 quartz()#
 dev.new(height = 5, width = 5.5, units = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("topright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=1, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
quartz()#
 dev.new(height = 5, width = 5.5, units = "in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("bottomright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.75, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 5.5,width = 5,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("bottomright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.75, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.size
dev.size()
dev.size()
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend("bottomright", bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.75, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
?legend
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=11, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
11*12
legend(x=132, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
legend(x=232, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
legend(x=132, y=232, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
legend(x=132, y=132, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=132, y=132, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
legend(x=132, y=180, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
legend(x=132, y=140, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=132, y=140, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=140, y=155, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")
length_filenames
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))             #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
matplot(truncR[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Reroductive output (kg)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
         legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22",   "black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
         legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",  "#8A0000", "#C23B22","black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",  "#8A0000", "#C23B22","black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
           legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",   "#C23B22","#8A0000","black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
           legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5 and 2", ""))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",    "#8A0000","black")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
           legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3 ), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5 and 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",    "#8A0000","#8A0000")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
           legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3 ), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5 and 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
# install.packages("FSA")#
# install.packages("nlstools")#
#
 # install.packages("ggplot2")#
library(ggplot2)#
#
Tmax=18#
time=1:(Tmax*12)#
quartz()#
windowframe=c(4,1)#
par(mfrow=windowframe)#
##Define functions#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 36, 40), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  maxsize <- (min(which(as.numeric(data[1, (2:215)]) == max(as.numeric(data[1, (2:215)]), na.rm =TRUE)))) + 1 #
  #print(data[1, maxsize])#
   #age_m <- min(which(as.numeric(data[1, -1]) >= 0.5*as.numeric(data[1, maxsize])))/12 #
   legend("topleft", legend=paste0("Lmax is ", data[1, maxsize], " cm"), bty="n")#
   return(data[1, maxsize])#
}#
plot_repro <- function(repro_data,  repro_filenames) {#
  matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
          ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
   #print(repro_data[1, -1])#
  maxrepro <- max(as.numeric(repro_data[1, -1]), na.rm=TRUE) + 1 #
   return(maxrepro)#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate reproduction#
lifetimeR <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  TotalR <- sum(data1[,2]*data2)#
  return(c(substr(filenames, 23, 31), TotalR) )#
} #
cumsurv <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Probability of survival to age", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
} #
##define wrapper function to calculate summary data for each temperature#
calc_metrics <- function(data_files)#
{#
# ## read in files#
#
repro_filenames <-#
  data_files[((length(data_files) / 4) + 1):(2 * (length(data_files) / 4))]#
state_filenames <-#
  data_files[(2 * (length(data_files) / 4) + 1):(3 * (length(data_files) /#
                                                        4))]#
length_filenames <- data_files[1:(length(data_files) / 4)]#
surv_filenames <-#
  data_files[(3 * (length(data_files) / 4) + 1):(4 * (length(data_files) /#
                                                        4))]#
#
length_filenames <- unique(length_filenames)#
print(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
  food_tab1 <-#
  substr(length_filenames, 37, 40) #
    kappa <- c(0.25, 0.5, 1, 2)#
#
###define the environmental context for these results#
Temp <- substr(length_filenames, 13, 15) #
TempC <- as.numeric(Temp)-273.15#
maxlength <- mapply(plot_length, length_data, length_filenames) #
maxR <- mapply(plot_repro, repro_data,   repro_filenames) #
#
repro_results <-#
  mapply(lifetimeR, repro_data, surv_data, length_filenames)#
lifetime_repro <- as.numeric(repro_results[2, ]) #
#
####create the dataframe summarizing the results of all metrics#
tabdata <- cbind(TempC,  rep(kappa, 2), maxlength, maxR, lifetime_repro)#
colnames(tabdata) <-#
  c("Temp",    "kappa", "Max_length", "Max_R", "lifetime_R")#
#
 return(tabdata)#
}#
#point to the files you want to compare#
#
    setwd("/Users/hkindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata#
#
setwd("/Users/hkindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasKonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata2<- alldata #with seasonality in K only#
setwd("/Users/hkindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasTonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata3 <- alldata #withseasonality in T only#
setwd("/Users/hkindsvater/Documents/size-spectra-life-history/Model_output/results_ss/tuna/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <-  (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata4 <- alldata #with seasonality in both T and K #
#
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 8), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))#
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
  xlim(c(0,5)) +#
  ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1#
#
Jdensity <-  4.2e+6 #
datatable$repro_inkg <- datatable$lifetime_R/Jdensity#
ggplot(data = datatable,  aes(x = kappa, y = repro_inkg, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
   xlim(c(0,5)) +#
#
  xlab(expression(kappa)) +#
  ylab("Expected Lifetime Reproduction (kg)")   +#
  theme_bw()
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)
datatable
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
  xlim(c(0,5)) +#
  ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 8), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
  xlim(c(0,5)) +#
  ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" )
theme_bw()
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" )
p1
ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
     ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()
datatable
plot(datatable$kappa, datatable$Max_length,col=as.factor(datatable$env) )
plot(datatable$kappa, datatable$Max_length,col=as.factor(datatable$env) , ylim = c(0, 375))
length_files
length_filenames
getwd()
# install.packages("FSA")#
# install.packages("nlstools")#
#
 # install.packages("ggplot2")#
library(ggplot2)#
#
Tmax=18#
time=1:(Tmax*12)#
quartz()#
windowframe=c(4,1)#
par(mfrow=windowframe)#
##Define functions#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 36, 40), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  maxsize <- (min(which(as.numeric(data[1, (2:215)]) == max(as.numeric(data[1, (2:215)]), na.rm =TRUE)))) + 1 #
  #print(data[1, maxsize])#
   #age_m <- min(which(as.numeric(data[1, -1]) >= 0.5*as.numeric(data[1, maxsize])))/12 #
   legend("topleft", legend=paste0("Lmax is ", data[1, maxsize], " cm"), bty="n")#
   return(data[1, maxsize])#
}#
plot_repro <- function(repro_data,  repro_filenames) {#
  matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
          ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
   #print(repro_data[1, -1])#
  maxrepro <- max(as.numeric(repro_data[1, -1]), na.rm=TRUE) + 1 #
   return(maxrepro)#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate reproduction#
lifetimeR <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  TotalR <- sum(data1[,2]*data2)#
  return(c(substr(filenames, 23, 31), TotalR) )#
} #
cumsurv <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Probability of survival to age", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
} #
##define wrapper function to calculate summary data for each temperature#
calc_metrics <- function(data_files)#
{#
# ## read in files#
#
repro_filenames <-#
  data_files[((length(data_files) / 4) + 1):(2 * (length(data_files) / 4))]#
state_filenames <-#
  data_files[(2 * (length(data_files) / 4) + 1):(3 * (length(data_files) /#
                                                        4))]#
length_filenames <- data_files[1:(length(data_files) / 4)]#
surv_filenames <-#
  data_files[(3 * (length(data_files) / 4) + 1):(4 * (length(data_files) /#
                                                        4))]#
#
length_filenames <- unique(length_filenames)#
print(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
  food_tab1 <-#
  substr(length_filenames, 37, 40) #
    kappa <- c(0.25, 0.5, 1, 2)#
#
###define the environmental context for these results#
Temp <- substr(length_filenames, 13, 15) #
TempC <- as.numeric(Temp)-273.15#
maxlength <- mapply(plot_length, length_data, length_filenames) #
maxR <- mapply(plot_repro, repro_data,   repro_filenames) #
#
repro_results <-#
  mapply(lifetimeR, repro_data, surv_data, length_filenames)#
lifetime_repro <- as.numeric(repro_results[2, ]) #
#
####create the dataframe summarizing the results of all metrics#
tabdata <- cbind(TempC,  rep(kappa, 2), maxlength, maxR, lifetime_repro)#
colnames(tabdata) <-#
  c("Temp",    "kappa", "Max_length", "Max_R", "lifetime_R")#
#
 return(tabdata)#
}#
#point to the files you want to compare#
#
    setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata#
#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasKonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata2<- alldata #with seasonality in K only#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasTonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata3 <- alldata #withseasonality in T only#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/tuna/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <-  (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata4 <- alldata #with seasonality in both T and K #
#
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 8), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))#
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
     ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1#
#
Jdensity <-  4.2e+6 #
datatable$repro_inkg <- datatable$lifetime_R/Jdensity#
ggplot(data = datatable,  aes(x = kappa, y = repro_inkg, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
   xlim(c(0,5)) +#
#
  xlab(expression(kappa)) +#
  ylab("Expected Lifetime Reproduction (kg)")   +#
  theme_bw()
p1
# install.packages("FSA")#
# install.packages("nlstools")#
#
 # install.packages("ggplot2")#
library(ggplot2)#
#
Tmax=18#
time=1:(Tmax*12)#
quartz()#
windowframe=c(4,1)#
par(mfrow=windowframe)#
##Define functions#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 36, 40), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  maxsize <- (min(which(as.numeric(data[1, (2:215)]) == max(as.numeric(data[1, (2:215)]), na.rm =TRUE)))) + 1 #
  #print(data[1, maxsize])#
   #age_m <- min(which(as.numeric(data[1, -1]) >= 0.5*as.numeric(data[1, maxsize])))/12 #
   legend("topleft", legend=paste0("Lmax is ", data[1, maxsize], " cm"), bty="n")#
   return(data[1, maxsize])#
}#
plot_repro <- function(repro_data,  repro_filenames) {#
  matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
          ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
   #print(repro_data[1, -1])#
  maxrepro <- max(as.numeric(repro_data[1, -1]), na.rm=TRUE) + 1 #
   return(maxrepro)#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate reproduction#
lifetimeR <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  TotalR <- sum(data1[,2]*data2)#
  return(c(substr(filenames, 23, 31), TotalR) )#
} #
cumsurv <-  function(reprodata, survdata, filenames) {#
  data1 <- (as.data.frame(t(rbind(fit_age, reprodata[1, 1:215]))))#
  data2 <- survdata$x[-216]#
  plot(data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Probability of survival to age", xlab="Age (years)")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
} #
##define wrapper function to calculate summary data for each temperature#
calc_metrics <- function(data_files)#
{#
# ## read in files#
#
repro_filenames <-#
  data_files[((length(data_files) / 4) + 1):(2 * (length(data_files) / 4))]#
state_filenames <-#
  data_files[(2 * (length(data_files) / 4) + 1):(3 * (length(data_files) /#
                                                        4))]#
length_filenames <- data_files[1:(length(data_files) / 4)]#
surv_filenames <-#
  data_files[(3 * (length(data_files) / 4) + 1):(4 * (length(data_files) /#
                                                        4))]#
#
length_filenames <- unique(length_filenames)#
print(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
  food_tab1 <-#
  substr(length_filenames, 37, 40) #
    kappa <- c(0.25, 0.5, 1, 2)#
#
###define the environmental context for these results#
Temp <- substr(length_filenames, 13, 15) #
TempC <- as.numeric(Temp)-273.15#
maxlength <- mapply(plot_length, length_data, length_filenames) #
maxR <- mapply(plot_repro, repro_data,   repro_filenames) #
#
repro_results <-#
  mapply(lifetimeR, repro_data, surv_data, length_filenames)#
lifetime_repro <- as.numeric(repro_results[2, ]) #
#
####create the dataframe summarizing the results of all metrics#
tabdata <- cbind(TempC,  rep(kappa, 2), maxlength, maxR, lifetime_repro)#
colnames(tabdata) <-#
  c("Temp",    "kappa", "Max_length", "Max_R", "lifetime_R")#
#
 return(tabdata)#
}#
#point to the files you want to compare#
#
    setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata#
#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasKonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata2<- alldata #with seasonality in K only#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/seasTonly/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata3 <- alldata #withseasonality in T only#
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/results_ss/tuna/summary_table")#
data_files <- list.files(pattern = "\\.csv$")#
tabdata  <- calc_metrics(data_files)#
#
alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <-  (as.numeric(alldata$kappa)*9*3 + as.numeric(alldata$kappa)*3) /12#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata4 <- alldata #with seasonality in both T and K #
#
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 12), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))
datatable
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata
alldata
calc_metrics <- function(data_files)#
{#
# ## read in files#
#
repro_filenames <-#
  data_files[((length(data_files) / 4) + 1):(2 * (length(data_files) / 4))]#
state_filenames <-#
  data_files[(2 * (length(data_files) / 4) + 1):(3 * (length(data_files) /#
                                                        4))]#
length_filenames <- data_files[1:(length(data_files) / 4)]#
surv_filenames <-#
  data_files[(3 * (length(data_files) / 4) + 1):(4 * (length(data_files) /#
                                                        4))]#
#
length_filenames <- unique(length_filenames)#
print(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
  food_tab1 <-#
  substr(length_filenames, 37, 40) #
    kappa <- c(0.25, 0.5, 1, 2,5)#
#
###define the environmental context for these results#
Temp <- substr(length_filenames, 13, 15) #
TempC <- as.numeric(Temp)-273.15#
maxlength <- mapply(plot_length, length_data, length_filenames) #
maxR <- mapply(plot_repro, repro_data,   repro_filenames) #
#
repro_results <-#
  mapply(lifetimeR, repro_data, surv_data, length_filenames)#
lifetime_repro <- as.numeric(repro_results[2, ]) #
#
####create the dataframe summarizing the results of all metrics#
tabdata <- cbind(TempC,  rep(kappa, 2), maxlength, maxR, lifetime_repro)#
colnames(tabdata) <-#
  c("Temp",    "kappa", "Max_length", "Max_R", "lifetime_R")#
#
 return(tabdata)#
}#
#point to the files you want to compare#
#
    setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata
setwd("/Users/hollykindsvater/Documents/size-spectra-life-history/Model_output/fig6/summary_table")#
      data_files <- list.files(pattern = "\\.csv$")#
 tabdata  <- calc_metrics(data_files)#
 alldata <- as.data.frame(tabdata)#
#
alldata$Max_size <- as.numeric(alldata$Max_length)#
alldata$kappa <- as.numeric(alldata$kappa)#
alldata$lifetime_R <- as.numeric(alldata$lifetime_R)#
alldata$Max_R <- as.numeric(alldata$Max_R)#
#
alldata1<- alldata
alldata1
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 12), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))#
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
     ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1#
#
Jdensity <-  4.2e+6 #
datatable$repro_inkg <- datatable$lifetime_R/Jdensity#
ggplot(data = datatable,  aes(x = kappa, y = repro_inkg, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
   xlim(c(0,5)) +#
#
  xlab(expression(kappa)) +#
  ylab("Expected Lifetime Reproduction (kg)")   +#
  theme_bw()
datatable <- rbind(alldata1, alldata2, alldata3, alldata4)#
datatable$env <- c(rep("Constant", 10), rep("Seasonality - K only", 8), rep("Seasonality - T only", 8), rep("Seasonality", 8))#
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
  ylim(c(0, 410)) +#
     ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1#
#
Jdensity <-  4.2e+6 #
datatable$repro_inkg <- datatable$lifetime_R/Jdensity#
ggplot(data = datatable,  aes(x = kappa, y = repro_inkg, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#F8B195",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(15, 17, 18, 19), name = "Environment") +#
   xlim(c(0,5)) +#
#
  xlab(expression(kappa)) +#
  ylab("Expected Lifetime Reproduction (kg)")   +#
  theme_bw()
p1
dev.new(height = 4, width = 4, unit = "in")#
p1 <- ggplot(data = datatable,  aes(x = kappa, y = Max_size, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#80CDC1",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(19, 17, 18, 15), name = "Environment") +#
  ylim(c(0, 410)) +#
     ylab("Maximum length (cm)")   +#
  xlab(expression(kappa)) +#
  theme_bw()#
p1#
#
Jdensity <-  4.2e+6 #
datatable$repro_inkg <- datatable$lifetime_R/Jdensity#
ggplot(data = datatable,  aes(x = kappa, y = repro_inkg, group = as.factor(env))) +#
  geom_point(aes(color = as.factor(env), shape = as.factor(env)),  size = 3) +        #
  scale_color_manual(values = alpha(c("#80CDC1",   "#F67280",   "#355C7D",   "#6C5B7B" ), 0.85), name = "Environment" ) + #
   scale_shape_manual(values = c(19, 17, 18, 15), name = "Environment") +#
   xlim(c(0,5)) +#
#
  xlab(expression(kappa)) +#
  ylab("Expected Lifetime Reproduction (kg)")   +#
  theme_bw()
p1
p1
Tmax=18#
time=1:(Tmax*12)#
# quartz()#
# windowframe=c(4,1)#
#  #
# par(mfrow=windowframe)#
#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 23, 31), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return((data[1, -1]))#
}#
plot_repro <- function(repro_data, length_data, repro_filenames) {#
  #matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
         # ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
  return(as.numeric(repro_data[1, -1]) )#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate metrics#
lifetimeM <-  function(survdata, filenames) {#
  data2 <- survdata$x[-216]#
   maxage <- which(survdata$x < 0.06)#
 # plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  #axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return(data2)#
} #
realized_M <-  function(survdata, filenames) {#
  annual_index<- seq(12, 215, 12)/12#
  data1  <- log(survdata$x[annual_index])#
  reg1 <- lm(data1~annual_index)#
  plot(annual_index, data1, ylab = "Ln(proportion surviving)", xlab = "Age (years)")#
  abline(reg1)#
   return(coef(reg1)[[2]])#
} #
maxage<-  function(survdata, filenames) {#
  lifespan <- min(which(survdata$x < 0.06))#
  return(lifespan)#
#
}#
#point to the files you want to compare#
    setwd("~/Documents/size-spectra-life-history/Model_output/suppfig6/")#
 data_files <- list.files(pattern = "\\.csv$")#
#
# #
# ## read in files#
# #
repro_filenames <- data_files[((length(data_files)/4)+1):(2*(length(data_files)/4))]#
state_filenames <- data_files[(2*(length(data_files)/4)+1):(3*(length(data_files)/4))]#
length_filenames <- data_files[1:(length(data_files)/4)]#
surv_filenames <- data_files[(3*(length(data_files)/4)+1):(4*(length(data_files)/4))]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
quartz()#
windowframe=c(4,1)#
#
par(mfrow=windowframe)#
L<-mapply(plot_length, length_data, length_filenames)    #
R<-mapply(plot_repro, repro_data, length_data, repro_filenames)#
# RV<-mapply(lifetimeR, repro_data, surv_data, length_filenames)#
# RV <- rbind(RV, rep(0, 12))#
lifespan <- mapply(maxage, surv_data, length_filenames) #
lifespan[2]<-215#
#
M <- mapply(lifetimeM, surv_data, length_filenames)#
#
truncate_age <- function(kappamat, lifespan) { #where kappamat is L, R, or RV#
  for (i in 1:6) {#
  kappamat[lifespan[i]:(Tmax*12-1), i] <- NA#
  }#
  return(kappamat)#
}#
#
truncL <- truncate_age(L, lifespan)#
truncR <- truncate_age(R, lifespan)/4.2e+6 #
truncM <- truncate_age(M, lifespan) #
 kappa<-c(0.5, 2)#
 index <- 1:6#
 linetypes <-c( 3, 1, 3, 1, 3, 1)#
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C",    "#8A0000","#8A0000")#
 matplot(truncL[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "", las=1, lwd=4,   ylab= "Length (cm)")#
         axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
           legend(x=132, y=150, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3 ), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5 and 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
   axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))   #
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4,  ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
Tmax=18#
time=1:(Tmax*12)#
# quartz()#
# windowframe=c(4,1)#
#  #
# par(mfrow=windowframe)#
#
plot_length <- function(data, filenames) {#
  matplot(t(data[,-1]), type="l", main=substr(filenames, 23, 31), col="darkgray", lwd=1.75, lty=1,  ylab="Length (cm)", ylim=c(0, 400), xlim=c(0.5, Tmax*12), xlab= "Age (years)", xaxt="n")#
  axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return((data[1, -1]))#
}#
plot_repro <- function(repro_data, length_data, repro_filenames) {#
  #matplot(t(repro_data[,-1]), type="l", main= substr(repro_filenames, 8, 23), col="red", lwd=1.75, lty=1,   #
         # ylab="Reproduction (J)",   xlab= "Age (years)", xaxt="n",  ylim=c(0, 5e+08), xlim=c(0.5, Tmax*12))#
  return(as.numeric(repro_data[1, -1]) )#
}#
# #
fit_age <- 1:215 #note we are focused only on growth from 0.5 year to 18 years of age..... #
# #
# #
#### now define functions to calculate metrics#
lifetimeM <-  function(survdata, filenames) {#
  data2 <- survdata$x[-216]#
   maxage <- which(survdata$x < 0.06)#
 # plot(data1[,2]*data2, type="l",main=substr(filenames, 23, 31), xaxt="n", lwd=3,ylim=c(0, 5e+07), xlim=c(0.5, Tmax*12), ylab="Reproductive value", xlab="Age (years)")#
  #axis(1, at = seq(0, (Tmax)*12, by=12), labels = (seq(1, Tmax+1, by=1)))#
  return(data2)#
} #
realized_M <-  function(survdata, filenames) {#
  annual_index<- seq(12, 215, 12)/12#
  data1  <- log(survdata$x[annual_index])#
  reg1 <- lm(data1~annual_index)#
  plot(annual_index, data1, ylab = "Ln(proportion surviving)", xlab = "Age (years)")#
  abline(reg1)#
   return(coef(reg1)[[2]])#
} #
maxage<-  function(survdata, filenames) {#
  lifespan <- min(which(survdata$x < 0.06))#
  return(lifespan)#
#
}#
#point to the files you want to compare#
    setwd("~/Documents/size-spectra-life-history/Model_output/suppfig6/")#
 data_files <- list.files(pattern = "\\.csv$")#
#
# #
# ## read in files#
# #
repro_filenames <- data_files[((length(data_files)/4)+1):(2*(length(data_files)/4))]#
state_filenames <- data_files[(2*(length(data_files)/4)+1):(3*(length(data_files)/4))]#
length_filenames <- data_files[1:(length(data_files)/4)]#
surv_filenames <- data_files[(3*(length(data_files)/4)+1):(4*(length(data_files)/4))]#
#
length_filenames <- unique(length_filenames)#
repro_filenames <- unique(repro_filenames)#
state_filenames <- unique(state_filenames)#
surv_filenames <- unique(surv_filenames)#
#
length_data <- lapply(length_filenames, read.csv)#
repro_data <- lapply(repro_filenames, read.csv)#
state_data <- lapply(state_filenames, read.csv)#
surv_data <- lapply(surv_filenames, read.csv)#
quartz()#
windowframe=c(4,1)#
#
par(mfrow=windowframe)#
L<-mapply(plot_length, length_data, length_filenames)    #
R<-mapply(plot_repro, repro_data, length_data, repro_filenames)#
# RV<-mapply(lifetimeR, repro_data, surv_data, length_filenames)#
# RV <- rbind(RV, rep(0, 12))#
lifespan <- mapply(maxage, surv_data, length_filenames) #
lifespan[2]<-215#
#
M <- mapply(lifetimeM, surv_data, length_filenames)#
#
truncate_age <- function(kappamat, lifespan) { #where kappamat is L, R, or RV#
  for (i in 1:6) {#
  kappamat[lifespan[i]:(Tmax*12-1), i] <- NA#
  }#
  return(kappamat)#
}#
#
truncL <- truncate_age(L, lifespan)#
truncR <- truncate_age(R, lifespan)/4.2e+6 #
truncM <- truncate_age(M, lifespan) #
 kappa<-c(0.5, 2)#
 index <- 1:6#
 linetypes <-c( 3, 1, 3, 1, 3, 1)#
dev.new(height = 3.5,width = 4,units ="in")#
 pal = c("#FF9E79","#FFCE30",  "#C23B22", "#FB6D4C", "#C23B22", "#8A0000", "black")#
 plot(1:215, truncL[1:215, 2] , type = "n", xaxt="n", xlab="", ylab = "Length (cm)", las = 1)#
axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[i]-1), truncL[1:(lifespan[i]-1), index[i]], f = .0005 ), lwd=3,  lty=linetypes[i], col=pal[i])#
 }#
 legend(x=11, bty="n", col=pal,  lty=c( 3, 1, 3, 1, 3, 1), lwd=4, cex=0.5, legend=c("H = 4, K = 0.5", "H = 4, K = 2",  "H = 8, K = 0.5", "H = 8, K = 2","H = 12, K = 0.5", "H = 12, K = 2"))#
 plot(1:215, truncR[1:215, 2], type = "n", xaxt="n", las=1, xlab="Age (years)", ylab = "Reproductive output (kg)")#
#
 for (i in 1:length(index)){#
   lines(lowess(1:(lifespan[index[i]]-1), truncR[1:(lifespan[index[i]]-1), index[i]], f = .5), lwd=3, lty=linetypes[i], col=pal[i])#
 }#
 matplot(truncM[, 1:6], col=pal, type="l", lty=c( 3, 1, 3, 1, 3, 1), xaxt="n", xlab = "Age (years)", las=1, lwd=4, , ylab= "Percent of cohort surviving")#
    axis(1, at = seq(0, (17)*12, by=12), labels = (seq(1, 18, by=1)))
